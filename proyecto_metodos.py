# -*- coding: utf-8 -*-
"""PROYECTO_METODOS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPuUk8NDfAV0DfBffX-eQi8g_iTI4JDf

TUTORIAL DE CODIGO 1
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
def df_dt(x, t, a, b, c, d):
    """Función del sistema en forma canónica"""
    dx = a * x[0] - b * x[0] * x[1]
    dy = - c * x[1] + d * x[0] * x[1]
    return np.array([dx, dy])
# Parámetros
a = 0.1
b = 0.02
c = 0.3
d = 0.01
# Condiciones iniciales
x0 = 40   # Presas
y0 = 9    # Depredadores
conds_iniciales = np.array([x0, y0])
# Condiciones para integración
tf = 200
N = 800
t = np.linspace(0, tf, N)
solucion = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))


#plt.plot(t, solucion[:, 0], label='presa')
#plt.plot(t, solucion[:, 1], label='depredador')
x_max = np.max(solucion[:,0]) * 1.05
y_max = np.max(solucion[:,1]) * 1.05
x = np.linspace(0, x_max, 25)
y = np.linspace(0, y_max, 25)
xx, yy = np.meshgrid(x, y)
uu, vv = df_dt((xx, yy), 0, a, b, c, d)
norm = np.sqrt(uu**2 + vv**2)
uu = uu / norm
vv = vv / norm
plt.quiver(xx, yy, uu, vv, norm, cmap=plt.cm.gray)
plt.plot(solucion[:, 0], solucion[:, 1])

"""PRUEBA DE CODIGO jesus"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960)
x0 = 5  # Presas
y0 = 4  # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración
to = 0
tf = 30
N = 800
t = np.linspace(to, tf, N)
solucion = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))

# Gráfico: Evolución Temporal
fig, ax1 = plt.subplots()

color = 'tab:red'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t, solucion[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:blue'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t, solucion[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

"""PROBLEMA UN LOBO MENOS LUEGO DEL 99 (TRABAJAR AQUI)"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Modelo a parti del 99
def df_dt_lobosmenos(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1] -1
  return np.array([dx, dy])
# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700   # Presas
y0 = 22    # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-98
to = 1960
tf = 1999
N = 800
t = np.linspace(to, tf, N)
solucion_60_98 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))
print(solucion_60_98[-1])

# Condiciones iniciales (Presa y depredador 1998-2021)

conds_iniciales_98 = solucion_60_98[-1]

# Condiciones para integración 98/21
to_98 = 1999
tf_98 = 2021
N_98 = 800
t_98 = np.linspace(to_98, tf_98, N_98)
solucion_98_21 = odeint(df_dt_lobosmenos, conds_iniciales_98, t_98, args=(a, b, c, d))
print(solucion_98_21[0])
print(solucion_98_21[-1])

# Gráfico: Evolución Temporal 60/98
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t, solucion_60_98[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t, solucion_60_98[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

# Gráfico: Evolución Temporal 98/21
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t_98, solucion_98_21[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:red'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t_98, solucion_98_21[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Modelo a partir del 98
def df_dt_lobosmenos(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1] -1
  return np.array([dx, dy])

# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700 # Presas
y0 = 22 # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-98
to = 1960
tf = 1998
N = 800
t = np.linspace(to, tf, N)
solucion_60_98 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))

# Condiciones iniciales (Presa y depredador 1998-2021)

conds_iniciales_98 = solucion_60_98[-1]

# Condiciones para integración 98/21
to_98 = 1998
tf_98 = 2021
N_98 = 800
t_98 = np.linspace(to_98, tf_98, N_98)
solucion_98_21 = odeint(df_dt_lobosmenos, conds_iniciales_98, t_98, args=(a, b, c, d))

fig, ax1 = plt.subplots()

# Alces (eje Y1)
color_alce = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color_alce)
ax1.plot(t, solucion_60_98[:, 0], color = "black")
ax1.plot(t_98, solucion_98_21[:, 0], color = color_alce, label= 'Alce')
ax1.tick_params(axis ='y', labelcolor = color_alce)

# Lobos (eje Y2)
ax2 = ax1.twinx()
color_lobo = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color_lobo)
ax2.plot(t, solucion_60_98[:, 1], color = "black")
ax2.plot(t_98, solucion_98_21[:, 1], color = color_lobo, label= "Lobo")
ax2.tick_params(axis ='y', labelcolor = color_lobo)

# Leyenda
ax1.legend(loc='upper left')
ax2.legend(loc="upper center")

# Título
fig.suptitle('Modelo Presa-Depredador Alce-Lobo', fontweight ="bold")

plt.show()



"""PROBLEMA alces menos 60%"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo GENERAL
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])
# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700   # Presas
y0 = 22    # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-99
to = 1960
tf = 1999
N = 800
t = np.linspace(to, tf, N)
solucion_60_99 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))
print(solucion_60_99[-1])

# Condiciones iniciales (Presa y depredador 1998-2021)
pob_sim_99=solucion_60_99[-1]
x0_alces_menos60 = pob_sim_99[0]*0.4
print(x0_alces_menos60)
y0_99 = pob_sim_99[-1]
print(y0_99)
conds_iniciales_99 = np.array([x0_alces_menos60, y0_99])
print(conds_iniciales_99)

# Condiciones para integración 99/21
to_99 = 1999
tf_99 = 2021
N_99 = 800
t_99 = np.linspace(to_99, tf_99, N_99)
solucion_99_21 = odeint(df_dt, conds_iniciales_99, t_99, args=(a, b, c, d))
print(solucion_99_21[0])
print(solucion_99_21[-1])

# Gráfico: Evolución Temporal 60/98
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t, solucion_60_99[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t, solucion_60_99[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

# Gráfico: Evolución Temporal 99/21
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t_99, solucion_99_21[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:red'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t_99, solucion_99_21[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700 # Presas
y0 = 22 # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-99
to = 1960
tf = 1999
N = 800
t = np.linspace(to, tf, N)
solucion_60_98 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))

# Condiciones iniciales (Presa y depredador 1999-2021)
pob_sim_99=solucion_60_99[-1]
x0_alces_menos60 = pob_sim_99[0]*0.4
print(x0_alces_menos60)
y0_99 = pob_sim_99[-1]
print(y0_99)
conds_iniciales_99 = np.array([x0_alces_menos60, y0_99])
print(conds_iniciales_99)

# Condiciones para integración 99/21
to_99 = 1999
tf_99 = 2021
N_99 = 800
t_99 = np.linspace(to_99, tf_99, N_99)
solucion_99_21 = odeint(df_dt, conds_iniciales_99, t_99, args=(a, b, c, d))
print(solucion_99_21[0])
print(solucion_99_21[-1])

fig, ax1 = plt.subplots()

# Alces (eje Y1)
color_alce = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color_alce)
ax1.plot(t, solucion_60_98[:, 0], color = "black")
ax1.plot(t_98, solucion_99_21[:, 0], color = color_alce, label= 'Alce')
ax1.tick_params(axis ='y', labelcolor = color_alce)

# Lobos (eje Y2)
ax2 = ax1.twinx()
color_lobo = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color_lobo)
ax2.plot(t, solucion_60_98[:, 1], color = "black")
ax2.plot(t_98, solucion_99_21[:, 1], color = color_lobo, label= "Lobo")
ax2.tick_params(axis ='y', labelcolor = color_lobo)

# Leyenda
ax1.legend(loc='upper left')
ax2.legend(loc="upper center")

# Título
fig.suptitle('Modelo Presa-Depredador Alce-Lobo', fontweight ="bold")

plt.show()

"""Problema 60% menosd e alces BACKUP

PROBLEMA 4 LOBOS MAS a partir del 99
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Modelo a parti del 99
def df_dt_lobosmas(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1] +4
  return np.array([dx, dy])
# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700   # Presas
y0 = 22    # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-98
to = 1960
tf = 1999
N = 800
t = np.linspace(to, tf, N)
solucion_60_98 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))
print(solucion_60_98[-1])

# Condiciones iniciales (Presa y depredador 1998-2021)

conds_iniciales_98 = solucion_60_98[-1]

# Condiciones para integración 98/21
to_98 = 1999
tf_98 = 2021
N_98 = 800
t_98 = np.linspace(to_98, tf_98, N_98)
solucion_98_21 = odeint(df_dt_lobosmas, conds_iniciales_98, t_98, args=(a, b, c, d))
print(solucion_98_21[0])
print(solucion_98_21[-1])

# Gráfico: Evolución Temporal 60/98
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t, solucion_60_98[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t, solucion_60_98[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

# Gráfico: Evolución Temporal 98/21
fig, ax1 = plt.subplots()

color = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color)
ax1.plot(t_98, solucion_98_21[:, 0], color = color)
ax1.tick_params(axis ='y', labelcolor = color)

ax2 = ax1.twinx()

color = 'tab:red'
ax2.set_ylabel('Depredador: Lobo', color = color)
ax2.plot(t_98, solucion_98_21[:, 1], color = color)
ax2.tick_params(axis ='y', labelcolor = color)

fig.suptitle('Modelo Presa-Depredador', fontweight ="bold")

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Modelo estándar
def df_dt(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1]
  return np.array([dx, dy])

# Modelo a parti del 99
def df_dt_lobosmas(x, t, a, b, c, d):
  dx = a * x[0] - b * x[0] * x[1]
  dy = - c * x[1] + d * x[0] * x[1] +4
  return np.array([dx, dy])
# Parámetros
a = 0.3
b = 0.01111
c = 0.2106
d = 0.000263

# Condiciones iniciales (Presa y depredador 1960-1998)
x0 = 700   # Presas
y0 = 22    # Depredadores
conds_iniciales = np.array([x0, y0])

# Condiciones para integración 60-98
to = 1960
tf = 1999
N = 800
t = np.linspace(to, tf, N)
solucion_60_98 = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))
print(solucion_60_98[-1])

# Condiciones iniciales (Presa y depredador 1998-2021)

conds_iniciales_98 = solucion_60_98[-1]

# Condiciones para integración 98/21
to_98 = 1999
tf_98 = 2021
N_98 = 800
t_98 = np.linspace(to_98, tf_98, N_98)
solucion_98_21 = odeint(df_dt_lobosmas, conds_iniciales_98, t_98, args=(a, b, c, d))
print(solucion_98_21[0])
print(solucion_98_21[-1])
fig, ax1 = plt.subplots()

# Alces (eje Y1)
color_alce = 'tab:blue'
ax1.set_xlabel('Tiempo (años)')
ax1.set_ylabel('Presa: Alce', color = color_alce)
ax1.plot(t, solucion_60_98[:, 0], color = "black")
ax1.plot(t_98, solucion_98_21[:, 0], color = color_alce, label= 'Alce')
ax1.tick_params(axis ='y', labelcolor = color_alce)

# Lobos (eje Y2)
ax2 = ax1.twinx()
color_lobo = 'tab:orange'
ax2.set_ylabel('Depredador: Lobo', color = color_lobo)
ax2.plot(t, solucion_60_98[:, 1], color = "black")
ax2.plot(t_98, solucion_98_21[:, 1], color = color_lobo, label= "Lobo")
ax2.tick_params(axis ='y', labelcolor = color_lobo)

# Leyenda
ax1.legend(loc='upper left')
ax2.legend(loc="upper center")

# Título
fig.suptitle('Modelo Presa-Depredador Alce-Lobo', fontweight ="bold")

plt.show()

prueba=np.array([0, 1, 2, 3, 4])
b=prueba[:-1]
p2 = np.array([5, 6, 7, 8, 9])
union=np.concatenate((b,p2))
print(b)

prueba_de_bloq= "a"

print(prueba_de_bloq)